const classish = (str) => !!str && str.indexOf('.') >= 0;
export const mapStyles = (styles) => (styles
    .replace(/({[^{}]+})/g, '$')
    .replace(/({[^{}]+})/g, '$')
    .match(/\.([^>~,+$:{\[\s]+)?/g) || [])
    .map((x) => x.replace(/[\s,.>~+$]+/, ''))
    .map((x) => x.replace(/[.\s.:]+/, ''));
export const extractParents = (selector) => {
    const cleanSelector = selector.replace(/\(([^)])*\)/g, '').replace(/(\\\+)/g, 'PLUS_SYMBOL');
    const parts = cleanSelector.split(' ');
    parts.pop();
    const ruleSelection = parts.join(' ').match(/\.([^>~+$:{\[\s]+)?/g) || [];
    const effectiveMatcher = ruleSelection.filter(classish);
    const selectors = effectiveMatcher.map((x) => x.replace(/[.\s.:]+/, '').replace(/PLUS_SYMBOL/g, '+')).filter(Boolean);
    return selectors;
};
export const mapSelector = (selector) => {
    const cleanSelector = selector.replace(/\(([^)])*\)/g, '').replace(/(\\\+)/g, 'PLUS_SYMBOL');
    const ruleSelection = cleanSelector.match(/\.([^>~+$:{\[\s]+)?/g) || [];
    ruleSelection.reverse();
    const effectiveMatcher = ruleSelection.find(classish) || '';
    const selectors = effectiveMatcher.match(/(\.[^.>~+,$:{\[\s]+)?/g);
    return (selectors || []).map((x) => x.replace(/[.\s.:]+/, '').replace(/PLUS_SYMBOL/g, '+')).filter(Boolean);
};
