import { __awaiter, __generator } from "tslib";
import { readFile } from 'fs';
import { extname, join, relative } from 'path';
import { promisify } from 'util';
import scanDirectory from 'scan-directory';
import { buildAst } from './parser/toAst';
import { flattenOrder } from './utils/order';
var RESOLVE_EXTENSIONS = ['.css'];
var pReadFile = promisify(readFile);
export var getFileContent = function (file) { return pReadFile(file, 'utf8'); };
var toFlattenArray = function (ast) {
    return Object.keys(ast).reduce(function (acc, file) {
        ast[file].selectors.forEach(function (sel) {
            sel.pieces.forEach(function (className) {
                if (!acc[className]) {
                    acc[className] = [];
                }
                acc[className].push(file);
            });
        });
        return acc;
    }, {});
};
var astFromFiles = function (fileDate) {
    return Object.keys(fileDate).reduce(function (acc, file) {
        acc[file] = buildAst(fileDate[file], file);
        return acc;
    }, {});
};
export function parseProjectStyles(data) {
    var ast = astFromFiles(data);
    return {
        isReady: true,
        lookup: toFlattenArray(ast),
        ast: ast,
    };
}
var passAll = function () { return true; };
var createAwaitableResult = function () {
    var resolve;
    var reject;
    var awaiter = new Promise(function (res, rej) {
        resolve = res;
        reject = rej;
    });
    var result = {
        isReady: false,
        then: function (res, rej) {
            return awaiter.then(res, rej);
        },
    };
    return {
        result: result,
        resolve: resolve,
        reject: reject,
    };
};
export function loadStyleDefinitions(getStyleNames, loader, fileFilter) {
    if (fileFilter === void 0) { fileFilter = passAll; }
    var _a = createAwaitableResult(), resolve = _a.resolve, reject = _a.reject, result = _a.result;
    function scanner() {
        return __awaiter(this, void 0, void 0, function () {
            var files, styleFiles;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, getStyleNames()];
                    case 1:
                        files = (_a.sent())
                            .map(function (file) { return ({
                            file: file,
                            order: flattenOrder(fileFilter(file)),
                        }); })
                            .filter(function (_a) {
                            var order = _a.order;
                            return !Number.isNaN(order);
                        })
                            .sort(function (a, b) { return a.order - b.order; })
                            .map(function (_a) {
                            var file = _a.file;
                            return file;
                        });
                        styleFiles = {};
                        files.map(function (file) { return (styleFiles[file] = undefined); });
                        return [4, Promise.all(files.map(function (file) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _a = styleFiles;
                                            _b = file;
                                            return [4, loader(file)];
                                        case 1:
                                            _a[_b] = _c.sent();
                                            return [2];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        return [2, parseProjectStyles(styleFiles)];
                }
            });
        });
    }
    scanner().then(function (styles) {
        Object.assign(result, styles);
        resolve();
    }, function (e) {
        reject(e);
        console.error(e);
        throw new Error('used-styles failed to start');
    });
    return result;
}
export function discoverProjectStyles(rootDir, fileFilter) {
    var _this = this;
    if (fileFilter === void 0) { fileFilter = passAll; }
    return loadStyleDefinitions(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, scanDirectory(rootDir, undefined, function () { return false; })];
                case 1: return [2, (_a.sent())
                        .filter(function (name) { return RESOLVE_EXTENSIONS.indexOf(extname(name)) >= 0; })
                        .map(function (file) { return relative(rootDir, file); })
                        .sort()];
            }
        });
    }); }, function (fileName) { return getFileContent(join(rootDir, fileName)); }, fileFilter);
}
