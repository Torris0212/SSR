import { Transform } from 'stream';
var findLastBrace = function (data) {
    var fromIndex = 0;
    while (true) {
        var classNamePosition = data.indexOf('class=', fromIndex);
        var endBrace = data.indexOf('>', Math.max(classNamePosition, fromIndex + 1)) + 1;
        if (endBrace === 0) {
            break;
        }
        fromIndex = Math.max(classNamePosition, endBrace);
    }
    return fromIndex;
};
export var process = function (chunk, line, lookupTable, callback) {
    var data = line.tail + chunk;
    var lastBrace = findLastBrace(data);
    var usedString = data.substring(0, lastBrace);
    callback(getUsedStyles(usedString, lookupTable));
    line.tail = data.substring(lastBrace);
    return usedString;
};
var createLine = function () { return ({
    tail: '',
}); };
export var getUsedStyles = function (str, lookupTable) { return (Object.keys((str.match(/class=["']([^"]+)["']/g) || []).concat((str.match(/class=([^"'\s>]+)/g) || [])).reduce(function (styles, className) {
    var classes = className.replace(/(class|'|"|=)+/g, '').split(' ');
    classes.forEach(function (singleClass) {
        var files = lookupTable[singleClass];
        if (files) {
            files.forEach(function (file) { return styles[file] = true; });
        }
    });
    return styles;
}, {}))); };
export var createStyleStream = function (lookupTable, callback) {
    var line = createLine();
    var styles = {};
    var injections = [];
    var cb = function (newStyles) {
        newStyles
            .forEach(function (style) {
            if (!styles[style]) {
                styles[style] = true;
                injections.push(callback(style));
            }
        });
    };
    return new Transform({
        transform: function (chunk, _, _callback) {
            injections = [];
            var chunkData = Buffer.from(process(chunk.toString('utf-8'), line, lookupTable, cb), 'utf-8');
            _callback(undefined, injections.filter(Boolean).join('\n') + chunkData);
        },
        flush: function (cb) {
            cb(undefined, line.tail);
        }
    });
};
