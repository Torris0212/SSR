import { StyleAst, StyleSelector } from './parser/ast';
export declare type StylesLookupTable = Record<string, string[]>;
export interface CacheLine {
    tail: string;
}
export declare type StyleFiles = Record<string, string>;
export declare type StyleDef = Record<string, Record<string, boolean>>;
export declare type UsedTypes = string[];
export declare type UsedTypesRef = Record<string, boolean>;
export interface SyncStyleDefinition {
    isReady: true;
    lookup: StylesLookupTable;
    ast: StyleAst;
}
export interface StyleChunk {
    file: string;
    css: string;
}
export declare type FlagType = Record<string, boolean>;
export declare type StyleDefinition = Readonly<{
    isReady: boolean;
    lookup: Readonly<StylesLookupTable>;
    ast: Readonly<StyleAst>;
    urlPrefix: string;
    then(resolve?: () => void, reject?: () => void): Promise<void>;
}>;
export declare type SelectionFilter = {
    (selector: string, rule: StyleSelector): boolean;
    introduceClasses?(classes: string[]): void;
};
