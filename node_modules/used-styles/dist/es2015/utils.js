import { isReact } from "./config";
import { memoizeOne } from './memoize-one';
export var findLastBrace = function (data) {
    var fromIndex = 0;
    while (true) {
        var classNamePosition = data.indexOf('class=', fromIndex);
        var endBrace = data.indexOf('>', Math.max(classNamePosition, fromIndex + 1)) + 1;
        if (endBrace === 0) {
            break;
        }
        fromIndex = Math.max(classNamePosition, endBrace);
    }
    return fromIndex;
};
export var createLine = function () { return ({
    tail: '',
}); };
export function unique(data) {
    return Array.from(new Set(data));
}
var memoizedArray = memoizeOne(function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return args;
});
export var getStylesInText = function (str) { return (memoizedArray.apply(void 0, isReact()
    ? getStylesInReactText(str)
    : getStylesInPlainText(str))); };
export var getStylesInPlainText = function (str) { return ((str.match(/class=["']([^"]+)["']/g) || []).concat((str.match(/class=([^"'\s>]+)/g) || [])).map(function (className) { return (className.replace(/(class|'|"|=)+/g, '')); })); };
var classPlaceholder = 'class="';
var classPlaceholderLength = classPlaceholder.length;
export var getStylesInReactText = function (str) { return ((str.match(/class="([^"]+)"/g) || []).slice().map(function (className) { return (className.substr(classPlaceholderLength, className.length - classPlaceholderLength - 1)); })); };
export var assertIsReady = function (def) {
    if (!def.isReady) {
        throw new Error('used-styles: style definitions are not ready yet. You should `await discoverProjectStyles(...)`');
    }
};
