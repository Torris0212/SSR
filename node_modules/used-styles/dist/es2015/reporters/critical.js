import { Transform } from 'stream';
import { isReact } from '../config';
import { criticalStylesToString, extractAllUnmatchableAsString } from '../getCSS';
import { assertIsReady } from '../utils/async';
import { createLine, createUsedFilter } from '../utils/cache';
import { findLastBrace } from '../utils/string';
export var process = function (chunk, line, callback) {
    return isReact() ? processReact(chunk, line, callback) : processPlain(chunk, line, callback);
};
export var processPlain = function (chunk, line, callback) {
    var data = line.tail + chunk;
    var lastBrace = findLastBrace(data);
    var usedString = data.substring(0, lastBrace);
    callback(usedString);
    line.tail = data.substring(lastBrace);
    return usedString;
};
export var processReact = function (chunk, _line, callback) {
    callback(chunk);
    return chunk;
};
export var createCriticalStyleStream = function (def) {
    var line = createLine();
    var injections = [];
    var filter = createUsedFilter();
    var styleCallback = function (content) {
        var style = criticalStylesToString(content, def, filter);
        style && injections.push(style);
    };
    var tick = 0;
    return new Transform({
        transform: function (chunk, _, _callback) {
            assertIsReady(def);
            injections = [];
            if (tick === 0) {
                var staticStyles = extractAllUnmatchableAsString(def);
                staticStyles && injections.push(staticStyles);
            }
            tick++;
            var chunkData = Buffer.from(process(chunk.toString('utf-8'), line, styleCallback), 'utf-8');
            _callback(undefined, injections.join('') + chunkData);
        },
        flush: function (flushCallback) {
            flushCallback(undefined, line.tail);
        },
    });
};
