import { StyleAst } from './parser/ast';
import { FlagType, SelectionFilter, StyleChunk, StyleDefinition, UsedTypes, UsedTypesRef } from './types';
export declare const getUnusableStyles: (x: Readonly<{
    isReady: boolean;
    lookup: Readonly<import("./types").StylesLookupTable>;
    ast: Readonly<StyleAst>;
    urlPrefix: string;
    then(resolve?: (() => void) | undefined, reject?: (() => void) | undefined): Promise<void>;
}>) => UsedTypesRef;
export declare const astToUsedStyles: (x: string[], def: Readonly<{
    isReady: boolean;
    lookup: Readonly<import("./types").StylesLookupTable>;
    ast: Readonly<StyleAst>;
    urlPrefix: string;
    then(resolve?: (() => void) | undefined, reject?: (() => void) | undefined): Promise<void>;
}>) => {
    fetches: Record<string, FlagType>;
    usage: string[];
};
export declare const getUsedStyles: (htmlCode: string, def: StyleDefinition) => UsedTypes;
export declare const wrapInStyle: (styles: string, usedStyles?: string[]) => string;
export declare const extractUnmatchableFromAst: (x: StyleAst, filter?: SelectionFilter | undefined) => StyleChunk[];
export declare const extractAllUnmatchable: (def: StyleDefinition, filter?: SelectionFilter | undefined) => StyleChunk[];
export declare const extractAllUnmatchableAsString: (x: Readonly<{
    isReady: boolean;
    lookup: Readonly<import("./types").StylesLookupTable>;
    ast: Readonly<StyleAst>;
    urlPrefix: string;
    then(resolve?: (() => void) | undefined, reject?: (() => void) | undefined): Promise<void>;
}>) => string;
export declare const criticalStylesToString: (html: string, def: StyleDefinition, filter?: SelectionFilter | undefined) => string;
export declare const getCriticalRules: (html: string, def: StyleDefinition, filter?: SelectionFilter) => string;
export declare const extractCriticalRules: (html: string, def: StyleDefinition, filter?: SelectionFilter) => string;
export declare const getCriticalStyles: (html: string, def: StyleDefinition, filter?: SelectionFilter) => string;
